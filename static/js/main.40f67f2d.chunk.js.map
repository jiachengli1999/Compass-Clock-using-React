{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","secondsArray","length","Array","from","map","val","index","array","state","hour","minute","second","timeOfDay","setInterval","time","Date","day","getHours","setState","getMinutes","getSeconds","className","style","backgroundColor","this","key","transform","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOA+FeA,G,wDA3Fb,aAAc,IAAD,8BACX,gBAoCFC,aAAe,SAAAC,GAAM,OAAIC,MAAMC,KAAK,CAACF,WAASG,KAAI,SAACC,EAAKC,GAAN,OAAgBA,KAAOF,KAAI,SAAAC,GAAG,OAAIA,EAAI,MArC3E,EAuCbE,MAAQ,SAAAN,GAAM,OAAIC,MAAMC,KAAK,CAACF,WAASG,KAAI,SAACC,EAAKC,GAAN,OAAgBA,MArCzD,EAAKE,MAAS,CACZC,KAAM,EACNC,OAAQ,EACRC,OAAQ,EACRC,UAAW,WANF,E,gEAUO,IAAD,OAEjBC,aAAY,WACV,IAAIC,EAAO,IAAIC,KACXC,EAAM,OAERA,EADEF,EAAKG,WAAa,GAAKH,EAAKG,WAAa,GACrC,gBAECH,EAAKG,YAAc,IAAMH,EAAKG,WAAa,GAC5C,kBAECH,EAAKG,YAAc,IAAMH,EAAKG,WAAa,GAC5C,gBAGA,cAER,EAAKC,SAAS,CACZT,KAAMK,EAAKG,WACXP,OAAQI,EAAKK,aACbR,OAAQG,EAAKM,aACbR,UAAWI,MAEZ,O,+BAQI,IAAD,OACN,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,aAClBC,MAAO,CAACC,gBAAgB,GAAD,OACtBC,KAAKhB,MAAMC,KAAO,GAAMe,KAAKhB,MAAMC,KAAO,GAAM,UAChDe,KAAKhB,MAAMC,MAAQ,IAAOe,KAAKhB,MAAMC,KAAO,GAAM,SAClDe,KAAKhB,MAAMC,MAAQ,IAAOe,KAAKhB,MAAMC,KAAO,GAAM,UAAY,aAC7D,yBAAKY,UAAU,WACb,yBAAKA,UAAU,WACZG,KAAKhB,MAAMI,YAGhB,yBAAKS,UAAU,UACZG,KAAKjB,MAAM,IAAIH,KAAI,SAACC,EAAKC,GACxB,OACE,yBAAKmB,IAAKnB,EACVe,UAAS,oBAAehB,IAAO,EAAKG,MAAMC,KAAM,KAAK,IACrDa,MAAO,CAACI,UAAU,UAAD,OAAgB,GAAJrB,EAAc,GAAS,EAAKG,MAAMC,KAA9C,UAFjB,UAGMJ,EAHN,WAQHmB,KAAKjB,MAAM,IAAIH,KAAI,SAACC,EAAKC,GACxB,OACE,yBAAKmB,IAAKnB,EACVe,UAAS,sBAAiBhB,IAAO,EAAKG,MAAME,OAAQ,KAAK,IACzDY,MAAO,CAACI,UAAU,UAAD,OAAgB,EAAJrB,EAAc,EAAS,EAAKG,MAAME,OAA9C,UAFjB,UAGML,EAHN,YAQLmB,KAAKxB,aAAa,IAAII,KAAI,SAACC,EAAKC,GAC7B,OACE,yBAAKmB,IAAKnB,EACVe,UAAS,sBAAiBhB,IAAO,EAAKG,MAAMG,OAAQ,KAAK,IACzDW,MAAO,CAACI,UAAU,UAAD,OAAgB,EAAJrB,EAAc,EAAS,EAAKG,MAAMG,OAA9C,UAFjB,UAGMN,EAHN,mB,GA9EEsB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.40f67f2d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = ({\n      hour: 0,\n      minute: 0,\n      second: 1,\n      timeOfDay: \"Welcome\"\n    })\n  }\n\n  componentDidMount(){\n    // update state every second\n    setInterval(() => {\n      let time = new Date()\n      let day = \"None\"\n      if (time.getHours() > 7 && time.getHours() < 12) {\n        day = \"Good Morning!\"\n      }\n      else if (time.getHours() >= 12 && time.getHours() < 17){\n        day = \"Good Afternoon!\"\n      }\n      else if (time.getHours() >= 17 && time.getHours() < 20){\n        day = \"Good Evening!\"\n      }\n      else{\n        day = \"Good Night!\"\n      }\n      this.setState({\n        hour: time.getHours(),\n        minute: time.getMinutes(),\n        second: time.getSeconds(),\n        timeOfDay: day,\n      })\n    }, 1000)\n  }\n\n  // Get an array of vals from 1 to size\n  secondsArray = length => Array.from({length}).map((val, index) => index).map(val => val+1);\n  // Get an array of vals from 0 to size-1\n  array = length => Array.from({length}).map((val, index) => index)\n\n  render(){\n    return(\n      <div className='App'>\n        <header className=\"App-header\"\n        style={{backgroundColor: `${\n        (this.state.hour > 7  && this.state.hour < 12) ? \"#FFFACD\" :\n        (this.state.hour >= 12  && this.state.hour < 17) ? \"orange\" :\n        (this.state.hour >= 17  && this.state.hour < 20) ? \"#87CEFA\" : \"#BD91DE\"}`}}>\n          <div className='appName'>\n            <div className='appName'>\n              {this.state.timeOfDay}\n            </div>\n          </div>\n          <div className='Circle'>\n            {this.array(24).map((val, index) => {\n              return (\n                <div key={index}\n                className={`hour hand ${val===(this.state.hour)?\"on\":\"\"}`}\n                style={{transform: `rotate(${val*(360/24)-(360/24)*(this.state.hour)}deg)`}}>\n                  {`${val} hr`}\n                </div>\n              )\n            })}\n\n            {this.array(60).map((val, index) => {\n              return (\n                <div key={index}\n                className={`minute hand ${val===(this.state.minute)?\"on\":\"\"}`}\n                style={{transform: `rotate(${val*(360/60)-(360/60)*(this.state.minute)}deg)`}}>\n                  {`${val} min`}\n                </div>\n              )\n            })}\n\n          {this.secondsArray(60).map((val, index) => {\n              return (\n                <div key={index}\n                className={`second hand ${val===(this.state.second)?\"on\":\"\"}`}\n                style={{transform: `rotate(${val*(360/60)-(360/60)*(this.state.second)}deg)`}}>\n                  {`${val} sec`}\n                </div>\n              )\n            })}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}